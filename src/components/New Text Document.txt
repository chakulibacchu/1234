import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Card, CardHeader, CardContent, CardActions, Typography, Badge, LinearProgress } from "@mui/material";
import {
  CheckCircleOutline as CheckCircleIcon,
  Lock as LockIcon,
  RadioButtonUnchecked as CircleIcon,
  FlashOn as FlashOnIcon,
  Book as BookIcon,
} from "@mui/icons-material";
import { db } from "@/lib/firebase";
import { collection, getDocs } from "firebase/firestore";

interface DayPlan {
  id: number;
  date: string;
  title: string;
  status: "locked" | "unlocked" | "completed" | "current";
  tasks: string[];
  completedTasks: number;
  totalTasks: number;
  xpReward: number;
}

export default function DuolingoProgressMap() {
  const HARDCODED_UID = "8UuQdWgmDahs2iv9EuDKcBkvfl62";

  const [dayPlans, setDayPlans] = useState<DayPlan[]>([]);
  const [loading, setLoading] = useState(true);
  const [overallProgress, setOverallProgress] = useState(0);

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const datedCoursesRef = collection(db, `users/${HARDCODED_UID}/datedcourses`);
        const snapshot = await getDocs(datedCoursesRef);

        if (snapshot.empty) {
          setLoading(false);
          return;
        }

        const allDocs = snapshot.docs.map(d => ({ id: d.id, data: d.data() }));
        const randomDoc = allDocs[Math.floor(Math.random() * allDocs.length)];

        const lessonsByDate = randomDoc.data.lessons_by_date || {};
        const plans: DayPlan[] = Object.entries(lessonsByDate)
          .sort(([a], [b]) => new Date(a).getTime() - new Date(b).getTime())
          .map(([date, dayData], index) => {
            const tasksArray = (dayData.tasks || []).map((t: any) => t.task || "");
            const status: DayPlan["status"] =
              index < 2 ? "completed" : index === 2 ? "current" : index === 3 ? "unlocked" : "locked";

            return {
              id: index + 1,
              date,
              title: dayData.title || `Day ${index + 1}: Social Skills`,
              status,
              tasks: tasksArray,
              completedTasks:
                status === "completed"
                  ? tasksArray.length
                  : status === "current"
                  ? 1
                  : 0,
              totalTasks: tasksArray.length,
              xpReward: 150 + index * 25,
            };
          });

        setDayPlans(plans);

        const totalCompleted = plans.reduce((sum, plan) => sum + plan.completedTasks, 0);
        const totalTasks = plans.reduce((sum, plan) => sum + plan.totalTasks, 0);
        setOverallProgress(totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0);
      } catch (error) {
        console.error("Error fetching tasks:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchTasks();
  }, []);

  if (loading) {
    return (
      <Card className="glass-card border-purple-500/20 p-8">
        <div className="flex flex-col items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mb-4"></div>
          <p className="text-muted-foreground">Loading your journey map...</p>
        </div>
      </Card>
    );
  }

  return (
    <motion.div className="w-full" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
      {/* Header */}
      <Card className="glass-card border-purple-500/20 mb-6">
        <CardHeader
          title={
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center neon-glow">
                <FlashOnIcon className="text-white" />
              </div>
              <div>
                <Typography variant="h5" className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent font-bold">
                  Your Journey Map
                </Typography>
                <Typography variant="body2" className="text-muted-foreground">
                  Preview the actions you will take over the next 5 days
                </Typography>
              </div>
            </div>
          }
        />
      </Card>

      {/* Timeline */}
      <div className="space-y-8">
        {dayPlans.map((plan, index) => {
          const isEven = index % 2 === 0;
          const progressPercent = plan.totalTasks > 0 ? (plan.completedTasks / plan.totalTasks) * 100 : 0;

          return (
            <motion.div
              key={plan.id}
              className={`flex items-center gap-6 ${isEven ? "flex-row" : "flex-row-reverse"}`}
              initial={{ opacity: 0, x: isEven ? -50 : 50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
            >
              {/* Node */}
              <div className="flex flex-col items-center">
                <motion.div
                  className={`w-20 h-20 rounded-full flex items-center justify-center border-4 relative
                    ${plan.status === "completed" ? "bg-green-500/70 border-green-400 neon-glow" : ""}
                    ${plan.status === "current" ? "bg-purple-500/70 border-purple-400 neon-glow" : ""}
                    ${plan.status === "unlocked" ? "bg-gray-600/70 border-gray-400" : ""}
                    ${plan.status === "locked" ? "bg-gray-800/70 border-gray-600" : ""}`}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  {plan.status === "completed" && <CheckCircleIcon className="text-white" />}
                  {plan.status === "current" && <FlashOnIcon className="text-white animate-pulse" />}
                  {plan.status === "unlocked" && <CircleIcon className="text-white" />}
                  {plan.status === "locked" && <LockIcon className="text-gray-400" />}
                </motion.div>

                {index < dayPlans.length - 1 && <div className="w-1 h-16 bg-gradient-to-b from-purple-500/50 to-transparent mt-4" />}
              </div>

              {/* Card */}
              <Card className={`flex-1 glass-card transition-all duration-300 hover:scale-105
                ${plan.status === "completed" ? "border-green-500/30 bg-green-500/10" : ""}
                ${plan.status === "current" ? "border-purple-500/30 bg-purple-500/10 neon-glow" : ""}
                ${plan.status === "unlocked" ? "border-gray-500/30 bg-gray-500/10" : ""}
                ${plan.status === "locked" ? "border-gray-600/20 bg-gray-700/10" : ""}`}
              >
                <CardHeader
                  title={
                    <div className="flex items-center gap-3">
                      <BookIcon
                        className={`${
                          plan.status === "completed" ? "text-green-400" : ""
                        } ${plan.status === "current" ? "text-purple-400" : ""} ${
                          plan.status === "unlocked" ? "text-gray-400" : ""
                        } ${plan.status === "locked" ? "text-gray-600" : ""}`}
                      />
                      <div>
                        <Typography variant="subtitle1">{plan.title}</Typography>
                        <Typography variant="body2" className="text-muted-foreground">
                          {plan.completedTasks}/{plan.totalTasks} tasks â€¢ {plan.xpReward} XP
                        </Typography>
                      </div>
                      <Badge
                        badgeContent={Math.round(progressPercent)}
                        color={plan.status === "completed" ? "success" : "secondary"}
                      />
                    </div>
                  }
                />
                <CardContent>
                  <div className="space-y-2">
                    {plan.tasks.map((task, taskIndex) => (
                      <div key={taskIndex} className="flex items-center gap-2">
                        <div className={`w-5 h-5 flex items-center justify-center rounded-full ${
                          taskIndex < plan.completedTasks ? "bg-green-500" : "bg-gray-600"
                        }`}>
                          {taskIndex < plan.completedTasks ? <CheckCircleIcon className="text-white w-3 h-3" /> : <CircleIcon className="text-gray-400 w-3 h-3" />}
                        </div>
                        <Typography
                          className={`${taskIndex < plan.completedTasks ? "line-through text-muted-foreground" : ""} ${plan.status === "locked" ? "text-muted-foreground" : ""}`}
                          variant="body2"
                        >
                          {task}
                        </Typography>
                      </div>
                    ))}
                    <div className="mt-2">
                      <LinearProgress variant="determinate" value={progressPercent} />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          );
        })}
      </div>
    </motion.div>
  );
}
